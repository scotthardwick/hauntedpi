import director, random, logging
from constants import *
logger = logging.getLogger(__name__)

ACTOR_CHANNEL = "left";
AMBIENT_CHANNEL = "right";
global MOST_RECENT_SOUND_PLAYED;
MOST_RECENT_SOUND_PLAYED = -1;

# Setup sounds to play at random intervals
# Additional code added (based on xxx) to check that the last used Sound is not immediately re-used.
def background_sound():
	global MOST_RECENT_SOUND_PLAYED
	sounds = ("scenes/audio/accordingtoplan.wav", "scenes/audio/muchmorebetter.wav", "scenes/audio/thatwaydirection.wav",)
	#RANDOM_SOUND=random.choice(sounds)
	#while MOST_RECENT_SOUND_PLAYED == RANDOM_SOUND:
	#	print "Duplicate Sound Chosen. Choosing Again."
	#	RANDOM_SOUND = random.choice(sounds)
	NEXT_SOUND_INDEX=MOST_RECENT_SOUND_PLAYED + 1
	LENGTH_SOUND_LIST = len(sounds) - 1
	#print LENGTH_SOUND_LIST
	if NEXT_SOUND_INDEX > LENGTH_SOUND_LIST:
		logger.debug("Hit end of list starting over.")
		NEXT_SOUND_INDEX = 0
	MOST_RECENT_SOUND_PLAYED = NEXT_SOUND_INDEX
	#print NEXT_SOUND_INDEX
	director.play_sound(sounds[NEXT_SOUND_INDEX], volume=1.0, channel=ACTOR_CHANNEL, origin="JackOrdered")
	# director.schedule(delay in seconds, callback, args)
	# note, the range is going to need to have its staring point be longer than the longest wave, else it will start playing over one another.
	director.schedule(random.randrange(20, 40), background_sound, ())

# Setup ambient track to loop indefinitely in background
director.play_sound("scenes/audio/marketplace_1.wav", volume=0.5, delay=0, loops=-1, channel=AMBIENT_CHANNEL, origin="JackOrdered")

# kick off the random background sounds
# director.schedule(delay in seconds, callback, args)
director.schedule(5, background_sound, ())
